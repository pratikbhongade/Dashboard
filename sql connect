import pyodbc
import pandas as pd
import dash
import dash_bootstrap_components as dbc
from dash import dcc, html
from dash.dependencies import Input, Output

# Specify the database name you identified in SSMS
database_name = 'ASPIRE'  # Replace with the actual database name

# Connection string using Windows Authentication (Trusted_Connection)
conn_str = (
    r'DRIVER={SQL Server};'
    r'SERVER=SDC01ASRSQTD01\TSQLINT0;'
    r'DATABASE=' + database_name + r';'
    r'Trusted_Connection=yes;'
)

# Connect to SQL Server
conn = pyodbc.connect(conn_str)

# Query the data
query = """
SELECT JobName, StartTime, EndTime, JobStatus 
FROM Job_Stats
WHERE ProcessDate='2024-06-21' 
ORDER BY ProcessDate DESC
"""
df = pd.read_sql(query, conn)

# Close the connection
conn.close()

# Separate the "Unlock Online" job
unlock_online_df = df[df['JobName'] == 'Unlock Online']
other_jobs_df = df[df['JobName'] != 'Unlock Online']

# Initialize the Dash app with Bootstrap CSS
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Layout of the dashboard
app.layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H1("Mainframe Job Status Dashboard", className='text-center mb-4'), width=12)
    ]),
    dbc.Row([
        dbc.Col([
            dbc.Card(
                dbc.CardBody([
                    html.H4("Unlock Online Job", className='card-title'),
                    dbc.Table.from_dataframe(unlock_online_df, striped=True, bordered=True, hover=True, className='table-dark')
                ]),
                className='mb-4'
            )
        ], width=12)
    ]),
    dbc.Row([
        dbc.Col([
            dcc.Dropdown(
                id='job-name-dropdown',
                options=[{'label': job, 'value': job} for job in other_jobs_df['JobName'].unique()],
                placeholder="Select a Job Name",
                className='mb-4'
            )
        ], width=6),
        dbc.Col([
            dcc.Dropdown(
                id='status-dropdown',
                options=[{'label': status, 'value': status} for status in other_jobs_df['JobStatus'].unique()],
                placeholder="Select Job Status",
                className='mb-4'
            )
        ], width=6)
    ]),
    dbc.Row([
        dbc.Col([
            html.Div(id='job-table')
        ], width=12)
    ])
], fluid=True)

# Callback to update the table based on dropdown selections
@app.callback(
    Output('job-table', 'children'),
    [Input('job-name-dropdown', 'value'),
     Input('status-dropdown', 'value')]
)
def update_table(selected_job, selected_status):
    filtered_df = other_jobs_df
    if selected_job:
        filtered_df = filtered_df[filtered_df['JobName'] == selected_job]
    if selected_status:
        filtered_df = filtered_df[filtered_df['JobStatus'] == selected_status]
    
    return dbc.Table.from_dataframe(filtered_df, striped=True, bordered=True, hover=True)

if __name__ == '__main__':
    app.run_server(debug=True)
